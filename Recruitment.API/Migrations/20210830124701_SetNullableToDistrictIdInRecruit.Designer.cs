// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Recruitment.API.Data;

namespace Recruitment.API.Migrations
{
    [DbContext(typeof(RecruitmentDbContext))]
    [Migration("20210830124701_SetNullableToDistrictIdInRecruit")]
    partial class SetNullableToDistrictIdInRecruit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Recruitment.API.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("ApplicationRoles");
                });

            modelBuilder.Entity("Recruitment.API.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("Recruitment.API.Models.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Recruitment.API.Models.CandidatePostResume", b =>
                {
                    b.Property<int>("CandidatePostResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("PathFileCV")
                        .HasColumnType("ntext")
                        .HasComment("Link CV");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày ứng tuyển");

                    b.Property<int?>("RecruitJobId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CandidatePostResumeId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("RecruitJobId");

                    b.ToTable("CandidatePostResumes");
                });

            modelBuilder.Entity("Recruitment.API.Models.Career", b =>
                {
                    b.Property<int>("CareerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CareerId");

                    b.ToTable("Careers");
                });

            modelBuilder.Entity("Recruitment.API.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên ngành");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Recruitment.API.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên tỉnh/thành phố");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Recruitment.API.Models.CompanySize", b =>
                {
                    b.Property<int>("CompanySizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Max")
                        .HasColumnType("int");

                    b.Property<int?>("Min")
                        .HasColumnType("int");

                    b.Property<string>("Show")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CompanySizeId");

                    b.ToTable("CompanySizes");
                });

            modelBuilder.Entity("Recruitment.API.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasComment("Mã tỉnh/thành phố");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên quận/huyện");

                    b.HasKey("DistrictId");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Recruitment.API.Models.Experience", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Max")
                        .HasColumnType("float");

                    b.Property<double?>("Min")
                        .HasColumnType("float");

                    b.Property<string>("Show")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ExperienceId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("Recruitment.API.Models.LevelInfo", b =>
                {
                    b.Property<int>("LevelInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên trình độ");

                    b.HasKey("LevelInfoId");

                    b.ToTable("LevelInfos");
                });

            modelBuilder.Entity("Recruitment.API.Models.New", b =>
                {
                    b.Property<int>("NewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasColumnType("ntext")
                        .HasComment("Ảnh đại diện");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Mã chuyên mục");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Chi tiết");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày đăng");

                    b.Property<DateTime?>("PublicDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày duyệt");

                    b.Property<string>("Quote")
                        .HasColumnType("ntext")
                        .HasComment("Mô tả ngắn gọn");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasComment("Trạng thái");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Tiêu đề");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasComment("Thể loại");

                    b.Property<int?>("WebmasterId")
                        .HasColumnType("int")
                        .HasComment("Mã người đăng");

                    b.HasKey("NewId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("WebmasterId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Recruitment.API.Models.Profession", b =>
                {
                    b.Property<int>("ProfessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CareerId")
                        .HasColumnType("int")
                        .HasComment("Mã ngành");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên công việc");

                    b.HasKey("ProfessionId");

                    b.HasIndex("CareerId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Recruitment.API.Models.RecruitJob", b =>
                {
                    b.Property<int>("RecruitJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Amount")
                        .HasColumnType("int")
                        .HasComment("Số lượng");

                    b.Property<string>("Benefit")
                        .HasColumnType("ntext")
                        .HasComment("Mô tả lợi ích");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("Count")
                        .HasColumnType("int")
                        .HasComment("Số lượng xem tin");

                    b.Property<string>("Describe")
                        .HasColumnType("ntext")
                        .HasComment("Mô tả công việc");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("EmailContact")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày hết hạn");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("LevelInfoId")
                        .HasColumnType("int")
                        .HasComment("Mã trình độ");

                    b.Property<string>("NameContact")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneContact")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Position")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Vị trí tuyển dụng");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày đăng");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<int?>("RecruitId")
                        .HasColumnType("int");

                    b.Property<string>("Require")
                        .HasColumnType("ntext")
                        .HasComment("Mô tả yêu cầu");

                    b.Property<int?>("SalaryId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasComment("Trạng thái");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tiêu đề");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasComment("Thể loại");

                    b.Property<int?>("WardId")
                        .HasColumnType("int");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("ntext")
                        .HasComment("Nơi làm việc");

                    b.Property<int?>("WorkTypeId")
                        .HasColumnType("int")
                        .HasComment("Mã thể loại làm việc");

                    b.HasKey("RecruitJobId");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("LevelInfoId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("RecruitId");

                    b.HasIndex("SalaryId");

                    b.HasIndex("WardId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("RecruitJobs");
                });

            modelBuilder.Entity("Recruitment.API.Models.Salary", b =>
                {
                    b.Property<int>("SalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Max")
                        .HasColumnType("float");

                    b.Property<double?>("Min")
                        .HasColumnType("float");

                    b.Property<string>("Show")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Giá hiển thị");

                    b.HasKey("SalaryId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("Recruitment.API.Models.SaveCandidate", b =>
                {
                    b.Property<int>("SaveCandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("RecruitId")
                        .HasColumnType("int");

                    b.HasKey("SaveCandidateId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("RecruitId");

                    b.ToTable("SaveCandidates");
                });

            modelBuilder.Entity("Recruitment.API.Models.SaveJob", b =>
                {
                    b.Property<int>("SaveJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int")
                        .HasComment("Mã người tìm việc");

                    b.Property<int?>("RecruitJobId")
                        .HasColumnType("int")
                        .HasComment("Mã người tuyển dụng");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasComment("Trạng thái");

                    b.HasKey("SaveJobId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("RecruitJobId");

                    b.ToTable("SaveJobs");
                });

            modelBuilder.Entity("Recruitment.API.Models.Ward", b =>
                {
                    b.Property<int>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên xã/phường");

                    b.HasKey("WardId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Recruitment.API.Models.Website", b =>
                {
                    b.Property<int>("WebsiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Banner")
                        .HasColumnType("ntext");

                    b.Property<string>("Banner2")
                        .HasColumnType("ntext");

                    b.Property<string>("Banner3")
                        .HasColumnType("ntext");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Youtube")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("WebsiteId");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("Recruitment.API.Models.WorkType", b =>
                {
                    b.Property<int>("WorkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại hình làm việc");

                    b.HasKey("WorkTypeId");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("Recruitment.API.Models.Candidate", b =>
                {
                    b.HasBaseType("Recruitment.API.Models.ApplicationUser");

                    b.Property<string>("About")
                        .HasColumnType("ntext")
                        .HasComment("Giới thiệu bản thân");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Ảnh đại diện");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DescribeCV")
                        .HasColumnType("ntext")
                        .HasComment("Mô tả CV");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<string>("ExperienceInfo")
                        .HasColumnType("ntext")
                        .HasComment("Mô tả kinh nghiệm");

                    b.Property<string>("Facebook")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Google")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("LevelInfoId")
                        .HasColumnType("int");

                    b.Property<string>("PathCV")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Position")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Vị trí");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày đăng ký");

                    b.Property<int?>("SalaryId")
                        .HasColumnType("int");

                    b.Property<int?>("Sex")
                        .HasColumnType("int")
                        .HasComment("Giới tính");

                    b.Property<string>("Speciality")
                        .HasColumnType("ntext");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("WardId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("LevelInfoId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("SalaryId");

                    b.HasIndex("WardId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Recruitment.API.Models.Recruit", b =>
                {
                    b.HasBaseType("Recruitment.API.Models.ApplicationUser");

                    b.Property<string>("About")
                        .HasColumnType("ntext")
                        .HasComment("Mô tả công ty");

                    b.Property<string>("Address")
                        .HasColumnType("ntext");

                    b.Property<string>("Avatar")
                        .HasColumnType("ntext")
                        .HasComment("Ảnh đại diện");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CompanySizeId")
                        .HasColumnType("int");

                    b.Property<string>("CoverImage")
                        .HasColumnType("ntext")
                        .HasComment("Ảnh bìa");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FoundedYear")
                        .HasColumnType("datetime")
                        .HasComment("Thời gian thành lập");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Logo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Logo công ty");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày đăng ký");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasComment("Trạng thái");

                    b.Property<int?>("WardId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanySizeId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("WardId");

                    b.ToTable("Recruits");
                });

            modelBuilder.Entity("Recruitment.API.Models.Webmaster", b =>
                {
                    b.HasBaseType("Recruitment.API.Models.ApplicationUser");

                    b.Property<string>("Address")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("date")
                        .HasComment("Ngày sinh");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime")
                        .HasComment("Ngày bắt đầu");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int")
                        .HasComment("Giới tính");

                    b.Property<int?>("Position")
                        .HasColumnType("int")
                        .HasComment("Vị trí làm việc");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasComment("Trạng thái");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasComment("Thể loại");

                    b.ToTable("Webmasters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Recruitment.API.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Recruitment.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Recruitment.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Recruitment.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recruitment.API.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Recruitment.API.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recruitment.API.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Recruitment.API.Models.CandidatePostResume", b =>
                {
                    b.HasOne("Recruitment.API.Models.Candidate", "Candidate")
                        .WithMany("CandidatePostResume")
                        .HasForeignKey("CandidateId");

                    b.HasOne("Recruitment.API.Models.RecruitJob", "RecruitJob")
                        .WithMany("CandidatePostResumes")
                        .HasForeignKey("RecruitJobId");

                    b.Navigation("Candidate");

                    b.Navigation("RecruitJob");
                });

            modelBuilder.Entity("Recruitment.API.Models.District", b =>
                {
                    b.HasOne("Recruitment.API.Models.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Recruitment.API.Models.New", b =>
                {
                    b.HasOne("Recruitment.API.Models.Category", "Category")
                        .WithMany("News")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Recruitment.API.Models.Webmaster", "Webmaster")
                        .WithMany("News")
                        .HasForeignKey("WebmasterId");

                    b.Navigation("Category");

                    b.Navigation("Webmaster");
                });

            modelBuilder.Entity("Recruitment.API.Models.Profession", b =>
                {
                    b.HasOne("Recruitment.API.Models.Career", "Career")
                        .WithMany("Professions")
                        .HasForeignKey("CareerId");

                    b.Navigation("Career");
                });

            modelBuilder.Entity("Recruitment.API.Models.RecruitJob", b =>
                {
                    b.HasOne("Recruitment.API.Models.City", "City")
                        .WithMany("RecruitJobs")
                        .HasForeignKey("CityId");

                    b.HasOne("Recruitment.API.Models.District", "District")
                        .WithMany("RecruitJobs")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Recruitment.API.Models.Experience", "Experience")
                        .WithMany("RecruitJobs")
                        .HasForeignKey("ExperienceId");

                    b.HasOne("Recruitment.API.Models.LevelInfo", "LevelInfo")
                        .WithMany("RecruitJobs")
                        .HasForeignKey("LevelInfoId");

                    b.HasOne("Recruitment.API.Models.Profession", "Profession")
                        .WithMany("RecruitJobs")
                        .HasForeignKey("ProfessionId");

                    b.HasOne("Recruitment.API.Models.Recruit", "Recruit")
                        .WithMany("RecruitJobs")
                        .HasForeignKey("RecruitId");

                    b.HasOne("Recruitment.API.Models.Salary", "Salary")
                        .WithMany("RecruitJobs")
                        .HasForeignKey("SalaryId");

                    b.HasOne("Recruitment.API.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");

                    b.HasOne("Recruitment.API.Models.WorkType", "WorkType")
                        .WithMany("RecruitJobs")
                        .HasForeignKey("WorkTypeId");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Experience");

                    b.Navigation("LevelInfo");

                    b.Navigation("Profession");

                    b.Navigation("Recruit");

                    b.Navigation("Salary");

                    b.Navigation("Ward");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Recruitment.API.Models.SaveCandidate", b =>
                {
                    b.HasOne("Recruitment.API.Models.Candidate", "Candidate")
                        .WithMany("SaveCandidates")
                        .HasForeignKey("CandidateId");

                    b.HasOne("Recruitment.API.Models.Recruit", "Recruit")
                        .WithMany("SaveCandidates")
                        .HasForeignKey("RecruitId");

                    b.Navigation("Candidate");

                    b.Navigation("Recruit");
                });

            modelBuilder.Entity("Recruitment.API.Models.SaveJob", b =>
                {
                    b.HasOne("Recruitment.API.Models.Candidate", "Candidate")
                        .WithMany("SaveJobs")
                        .HasForeignKey("CandidateId");

                    b.HasOne("Recruitment.API.Models.RecruitJob", "RecruitJob")
                        .WithMany()
                        .HasForeignKey("RecruitJobId");

                    b.Navigation("Candidate");

                    b.Navigation("RecruitJob");
                });

            modelBuilder.Entity("Recruitment.API.Models.Ward", b =>
                {
                    b.HasOne("Recruitment.API.Models.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Recruitment.API.Models.Candidate", b =>
                {
                    b.HasOne("Recruitment.API.Models.City", "City")
                        .WithMany("Candidates")
                        .HasForeignKey("CityId");

                    b.HasOne("Recruitment.API.Models.District", "District")
                        .WithMany("Candidates")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Recruitment.API.Models.Experience", "Experience")
                        .WithMany("Candidates")
                        .HasForeignKey("ExperienceId");

                    b.HasOne("Recruitment.API.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Recruitment.API.Models.Candidate", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Recruitment.API.Models.LevelInfo", "LevelInfo")
                        .WithMany("Candidates")
                        .HasForeignKey("LevelInfoId");

                    b.HasOne("Recruitment.API.Models.Profession", "Profession")
                        .WithMany("Candidates")
                        .HasForeignKey("ProfessionId");

                    b.HasOne("Recruitment.API.Models.Salary", "Salary")
                        .WithMany("Candidates")
                        .HasForeignKey("SalaryId");

                    b.HasOne("Recruitment.API.Models.Ward", "Ward")
                        .WithMany("Candidates")
                        .HasForeignKey("WardId");

                    b.HasOne("Recruitment.API.Models.WorkType", "WorkType")
                        .WithMany("Candidates")
                        .HasForeignKey("WorkTypeId");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Experience");

                    b.Navigation("LevelInfo");

                    b.Navigation("Profession");

                    b.Navigation("Salary");

                    b.Navigation("Ward");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Recruitment.API.Models.Recruit", b =>
                {
                    b.HasOne("Recruitment.API.Models.City", "City")
                        .WithMany("Recruits")
                        .HasForeignKey("CityId");

                    b.HasOne("Recruitment.API.Models.CompanySize", "CompanySize")
                        .WithMany("Recruits")
                        .HasForeignKey("CompanySizeId");

                    b.HasOne("Recruitment.API.Models.District", "District")
                        .WithMany("Recruits")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Recruitment.API.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Recruitment.API.Models.Recruit", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Recruitment.API.Models.Profession", "Profession")
                        .WithMany("Recruits")
                        .HasForeignKey("ProfessionId");

                    b.HasOne("Recruitment.API.Models.Ward", "Ward")
                        .WithMany("Recruits")
                        .HasForeignKey("WardId");

                    b.Navigation("City");

                    b.Navigation("CompanySize");

                    b.Navigation("District");

                    b.Navigation("Profession");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Recruitment.API.Models.Webmaster", b =>
                {
                    b.HasOne("Recruitment.API.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("Recruitment.API.Models.Webmaster", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recruitment.API.Models.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("Recruitment.API.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("Recruitment.API.Models.Career", b =>
                {
                    b.Navigation("Professions");
                });

            modelBuilder.Entity("Recruitment.API.Models.Category", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("Recruitment.API.Models.City", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Districts");

                    b.Navigation("RecruitJobs");

                    b.Navigation("Recruits");
                });

            modelBuilder.Entity("Recruitment.API.Models.CompanySize", b =>
                {
                    b.Navigation("Recruits");
                });

            modelBuilder.Entity("Recruitment.API.Models.District", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("RecruitJobs");

                    b.Navigation("Recruits");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("Recruitment.API.Models.Experience", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("RecruitJobs");
                });

            modelBuilder.Entity("Recruitment.API.Models.LevelInfo", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("RecruitJobs");
                });

            modelBuilder.Entity("Recruitment.API.Models.Profession", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("RecruitJobs");

                    b.Navigation("Recruits");
                });

            modelBuilder.Entity("Recruitment.API.Models.RecruitJob", b =>
                {
                    b.Navigation("CandidatePostResumes");
                });

            modelBuilder.Entity("Recruitment.API.Models.Salary", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("RecruitJobs");
                });

            modelBuilder.Entity("Recruitment.API.Models.Ward", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Recruits");
                });

            modelBuilder.Entity("Recruitment.API.Models.WorkType", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("RecruitJobs");
                });

            modelBuilder.Entity("Recruitment.API.Models.Candidate", b =>
                {
                    b.Navigation("CandidatePostResume");

                    b.Navigation("SaveCandidates");

                    b.Navigation("SaveJobs");
                });

            modelBuilder.Entity("Recruitment.API.Models.Recruit", b =>
                {
                    b.Navigation("RecruitJobs");

                    b.Navigation("SaveCandidates");
                });

            modelBuilder.Entity("Recruitment.API.Models.Webmaster", b =>
                {
                    b.Navigation("News");
                });
#pragma warning restore 612, 618
        }
    }
}
